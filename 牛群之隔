/**
 * struct ListNode {
 *  int val;
 *  struct ListNode *next;
 *  ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
class Solution {
  public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     *
     * @param head ListNode类
     * @param x int整型
     * @return ListNode类
     */
    ListNode* cow_partition(ListNode* head, int x) {
        // write code here
        if (head == nullptr) return nullptr;
        // 因为头结点可能是要删除的，所有利用一个哑结点
        ListNode* dummy = new ListNode(-1);
        dummy->next = head;
        // pre作为移动节点
        ListNode* pre = dummy;
        // 记录新产生的<=x的节点
        ListNode* new_head = nullptr, *new_pre = nullptr;
        while (pre->next) {
            if (pre->next->val < x) {
                // 第一次遇到<x的节点
                if (new_pre == nullptr) {
                    new_head = pre->next;
                    new_pre = pre->next;
                } else {
                    // 之后遇到<x的节点
                    new_pre->next = pre->next;
                    new_pre = new_pre->next;
                }
                pre->next = pre->next->next;
            } else {
                pre = pre->next;
            }
        }
        // 将<x的结点和>=x的节点串起来
        new_pre->next = dummy->next;
        return new_head;
    }
};